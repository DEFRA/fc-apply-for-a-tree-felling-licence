// <auto-generated />
using System;
using Forestry.Flo.Services.Applicants;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forestry.Flo.Services.Applicants.Migrations
{
    [DbContext(typeof(ApplicantsContext))]
    [Migration("20220823113303_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Applicants")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ContactMobileTelephone")
                        .HasColumnType("text");

                    b.Property<string>("ContactTelephone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAcceptedPrivacyPolicy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateAcceptedTermsAndConditions")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityProviderId")
                        .HasColumnType("text");

                    b.Property<Guid?>("InviteToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InviteTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredContactMethod")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityProviderId")
                        .IsUnique();

                    b.HasIndex("WoodlandOwnerId");

                    b.ToTable("UserAccount", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrganisation")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WoodlandOwner", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", "WoodlandOwner")
                        .WithMany()
                        .HasForeignKey("WoodlandOwnerId");

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("WoodlandOwner");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "OrganisationAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("OrganisationAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
