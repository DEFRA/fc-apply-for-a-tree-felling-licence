// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using Forestry.Flo.Services.Applicants;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forestry.Flo.Services.Applicants.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(ApplicantsContext))]
    partial class ApplicantsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Applicants")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.Agent.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<bool>("IsFcAgency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOrganisation")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("text");

                    b.Property<bool>("ShouldAutoApproveThinningApplications")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IsFcAgency")
                        .IsUnique()
                        .HasFilter("\"IsFcAgency\" = true");

                    b.ToTable("Agency", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AafDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AgentAuthorityFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentAuthorityFormId");

                    b.ToTable("AafDocument", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("WoodlandOwnerId");

                    b.ToTable("AgentAuthority", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthorityForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AgentAuthorityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidToDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentAuthorityId");

                    b.HasIndex("UploadedById");

                    b.ToTable("AgentAuthorityForm", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactMobileTelephone")
                        .HasColumnType("text");

                    b.Property<string>("ContactTelephone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAcceptedPrivacyPolicy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateAcceptedTermsAndConditions")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityProviderId")
                        .HasColumnType("text");

                    b.Property<Guid?>("InviteToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InviteTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PreferredContactMethod")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityProviderId")
                        .IsUnique();

                    b.HasIndex("WoodlandOwnerId");

                    b.ToTable("UserAccount", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<string>("ContactTelephone")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrganisation")
                        .HasColumnType("boolean");

                    b.Property<string>("LandlordFirstName")
                        .HasColumnType("text");

                    b.Property<string>("LandlordLastName")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("text");

                    b.Property<int>("TenantType")
                        .HasColumnType("integer");

                    b.Property<int>("WoodlandOwnerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WoodlandOwner", "Applicants");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.Agent.Agency", b =>
                {
                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AgencyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("AgencyId");

                            b1.ToTable("Agency", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("AgencyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AafDocument", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthorityForm", null)
                        .WithMany("AafDocuments")
                        .HasForeignKey("AgentAuthorityFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthority", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.Agent.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId");

                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", "WoodlandOwner")
                        .WithMany()
                        .HasForeignKey("WoodlandOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("WoodlandOwner");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthorityForm", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthority", null)
                        .WithMany("AgentAuthorityForms")
                        .HasForeignKey("AgentAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.Agent.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", "WoodlandOwner")
                        .WithMany()
                        .HasForeignKey("WoodlandOwnerId");

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Agency");

                    b.Navigation("ContactAddress");

                    b.Navigation("WoodlandOwner");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "OrganisationAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("OrganisationAddress");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthority", b =>
                {
                    b.Navigation("AgentAuthorityForms");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.AgentAuthority.AgentAuthorityForm", b =>
                {
                    b.Navigation("AafDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
