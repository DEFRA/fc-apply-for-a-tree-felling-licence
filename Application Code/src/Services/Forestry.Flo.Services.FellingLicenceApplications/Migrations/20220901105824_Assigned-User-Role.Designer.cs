// <auto-generated />
using System;
using Forestry.Flo.Services.FellingLicenceApplications;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forestry.Flo.Services.FellingLicenceApplications.Migrations
{
    [DbContext(typeof(FellingLicenceApplicationsContext))]
    [Migration("20220901105824_Assigned-User-Role")]
    partial class AssignedUserRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FellingLicenceApplications")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ContactMobileTelephone")
                        .HasColumnType("text");

                    b.Property<string>("ContactTelephone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAcceptedPrivacyPolicy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateAcceptedTermsAndConditions")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityProviderId")
                        .HasColumnType("text");

                    b.Property<Guid?>("InviteToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InviteTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("PreferredContactMethod")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WoodlandOwnerId");

                    b.ToTable("UserAccount", "Applicants", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrganisation")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WoodlandOwner", "Applicants", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.AssigneeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FellingLicenceApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimestampAssigned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampUnassigned")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FellingLicenceApplicationId");

                    b.ToTable("AssigneeHistory", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FellingLicenceApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("FileType")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FellingLicenceApplicationId");

                    b.ToTable("Document", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ActualFellingEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualFellingStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApplicationReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProposedFellingEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProposedFellingStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FellingLicenceApplication", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingOutcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfTrees")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProposedFellingDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Species")
                        .HasColumnType("integer");

                    b.Property<string>("TreeMarking")
                        .HasColumnType("text");

                    b.Property<int?>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProposedFellingDetailsId");

                    b.ToTable("FellingOutcome", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProposedFellingDetailsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProposedFellingDetailsId");

                    b.ToTable("FellingSpecies", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("FellingLicenceApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropertyProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FellingLicenceApplicationId")
                        .IsUnique();

                    b.ToTable("LinkedPropertyProfile", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedFellingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double>("AreaToBeFelled")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsPartOfTreePreservationOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWithinConservationArea")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LinkedPropertyProfileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("NumberOfTrees")
                        .HasColumnType("integer");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PropertyProfileCompartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TreeMarking")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LinkedPropertyProfileId");

                    b.ToTable("ProposedFellingDetail", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedRestockingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LinkedPropertyProfileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PercentageOfRestockArea")
                        .HasColumnType("integer");

                    b.Property<Guid>("PropertyProfileCompartmentId")
                        .HasColumnType("uuid");

                    b.Property<double>("RestockingDensity")
                        .HasColumnType("double precision");

                    b.Property<string>("RestockingProposal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LinkedPropertyProfileId");

                    b.ToTable("ProposedRestockingDetail", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.RestockingOutcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfTrees")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProposedRestockingDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Species")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProposedRestockingDetailsId");

                    b.ToTable("RestockingOutcome", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.RestockingSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProposedRestockingDetailsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProposedRestockingDetailsId");

                    b.ToTable("RestockingSpecies", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.StatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FellingLicenceApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FellingLicenceApplicationId");

                    b.ToTable("StatusHistory", "FellingLicenceApplications");
                });

            modelBuilder.Entity("Forestry.Flo.Services.PropertyProfiles.Entities.Compartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompartmentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("GISData")
                        .HasColumnType("text");

                    b.Property<Guid>("PropertyProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubCompartmentName")
                        .HasColumnType("text");

                    b.Property<double?>("TotalHectares")
                        .HasColumnType("double precision");

                    b.Property<string>("WoodlandName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropertyProfileId");

                    b.ToTable("Compartment", "FellingLicenceApplications", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Forestry.Flo.Services.PropertyProfiles.Entities.PropertyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasWoodlandManagementPlan")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWoodlandCertificationScheme")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NearestTown")
                        .HasColumnType("text");

                    b.Property<string>("OSGridReference")
                        .HasColumnType("text");

                    b.Property<string>("WoodlandCertificationSchemeReference")
                        .HasColumnType("text");

                    b.Property<string>("WoodlandManagementPlanReference")
                        .HasColumnType("text");

                    b.Property<Guid>("WoodlandOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PropertyProfile", "FellingLicenceApplications", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.UserAccount.UserAccount", b =>
                {
                    b.HasOne("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", "WoodlandOwner")
                        .WithMany()
                        .HasForeignKey("WoodlandOwnerId");

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("WoodlandOwner");
                });

            modelBuilder.Entity("Forestry.Flo.Services.Applicants.Entities.WoodlandOwner.WoodlandOwner", b =>
                {
                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.OwnsOne("Forestry.Flo.Services.Applicants.Entities.Address", "OrganisationAddress", b1 =>
                        {
                            b1.Property<Guid>("WoodlandOwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("Line3")
                                .HasColumnType("text");

                            b1.Property<string>("Line4")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.HasKey("WoodlandOwnerId");

                            b1.ToTable("WoodlandOwner", "Applicants");

                            b1.WithOwner()
                                .HasForeignKey("WoodlandOwnerId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("OrganisationAddress");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.AssigneeHistory", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", "FellingLicenceApplication")
                        .WithMany("AssigneeHistories")
                        .HasForeignKey("FellingLicenceApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FellingLicenceApplication");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.Document", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", "FellingLicenceApplication")
                        .WithMany("Documents")
                        .HasForeignKey("FellingLicenceApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FellingLicenceApplication");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingOutcome", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedFellingDetail", "ProposedFellingDetail")
                        .WithMany("FellingOutcomes")
                        .HasForeignKey("ProposedFellingDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProposedFellingDetail");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingSpecies", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedFellingDetail", "ProposedFellingDetail")
                        .WithMany("FellingSpecies")
                        .HasForeignKey("ProposedFellingDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProposedFellingDetail");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", "FellingLicenceApplication")
                        .WithOne("LinkedPropertyProfile")
                        .HasForeignKey("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", "FellingLicenceApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FellingLicenceApplication");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedFellingDetail", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", "LinkedPropertyProfile")
                        .WithMany("ProposedFellingDetails")
                        .HasForeignKey("LinkedPropertyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedPropertyProfile");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedRestockingDetail", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", "LinkedPropertyProfile")
                        .WithMany("ProposedRestockingDetails")
                        .HasForeignKey("LinkedPropertyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedPropertyProfile");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.RestockingOutcome", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedRestockingDetail", "ProposedRestockingDetail")
                        .WithMany("RestockingOutcomes")
                        .HasForeignKey("ProposedRestockingDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProposedRestockingDetail");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.RestockingSpecies", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedRestockingDetail", "ProposedRestockingDetail")
                        .WithMany("RestockingSpecies")
                        .HasForeignKey("ProposedRestockingDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProposedRestockingDetail");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.StatusHistory", b =>
                {
                    b.HasOne("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", "FellingLicenceApplication")
                        .WithMany("StatusHistories")
                        .HasForeignKey("FellingLicenceApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FellingLicenceApplication");
                });

            modelBuilder.Entity("Forestry.Flo.Services.PropertyProfiles.Entities.Compartment", b =>
                {
                    b.HasOne("Forestry.Flo.Services.PropertyProfiles.Entities.PropertyProfile", "PropertyProfile")
                        .WithMany("Compartments")
                        .HasForeignKey("PropertyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyProfile");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.FellingLicenceApplication", b =>
                {
                    b.Navigation("AssigneeHistories");

                    b.Navigation("Documents");

                    b.Navigation("LinkedPropertyProfile");

                    b.Navigation("StatusHistories");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.LinkedPropertyProfile", b =>
                {
                    b.Navigation("ProposedFellingDetails");

                    b.Navigation("ProposedRestockingDetails");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedFellingDetail", b =>
                {
                    b.Navigation("FellingOutcomes");

                    b.Navigation("FellingSpecies");
                });

            modelBuilder.Entity("Forestry.Flo.Services.FellingLicenceApplications.Entities.ProposedRestockingDetail", b =>
                {
                    b.Navigation("RestockingOutcomes");

                    b.Navigation("RestockingSpecies");
                });

            modelBuilder.Entity("Forestry.Flo.Services.PropertyProfiles.Entities.PropertyProfile", b =>
                {
                    b.Navigation("Compartments");
                });
#pragma warning restore 612, 618
        }
    }
}
