name: Sonar Cloud Build and Test Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_test_sonar:
    if: ${{ vars.SONAR_ENABLED == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup Java (for SonarCloud)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: SonarCloud Begin
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        working-directory: Application Code
        run: >
          dotnet sonarscanner begin
          /k:"${{ vars.SONAR_PROJECT_KEY }}"
          /o:"${{ vars.SONAR_ORG }}"
          /d:sonar.host.url="https://sonarcloud.io"
          /d:sonar.token="${{ secrets.SONAR_TOKEN_ACTIONS }}"
          /d:sonar.verbose=true
          /d:sonar.qualitygate.wait=false
          /d:sonar.cs.opencover.reportsPaths="**/TestResults/*/coverage.opencover.xml"
          /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          
      - name: Restore dependencies
        run: dotnet restore
        working-directory: Application Code

      - name: Inject User Secrets for External Project
        shell: bash
        run: |
          externalProjectPath="src/Host Applications/Forestry.Flo.External.Web/Forestry.Flo.External.Web.csproj"
          dotnet user-secrets set "ConnectionStrings:DefaultConnection" "just_text_for_secret" --project "$externalProjectPath"
          dotnet user-secrets set "AzureAdB2C:ClientId" "${{ secrets.AZURE_AD_B2C_CLIENT_ID }}" --project "$externalProjectPath"
          dotnet user-secrets set "AzureAdB2C:ClientSecret" "${{ secrets.AZURE_AD_B2C_CLIENT_SECRET }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:ApiKey" "${{ secrets.ESRI_FORESTRY_API_KEY }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientID" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_ID }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientSecret" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_SECRET }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:ApiKey" "${{ secrets.ESRI_FORESTER_API_KEY }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$externalProjectPath"
          dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$externalProjectPath"
          dotnet user-secrets set "LandInformationSearch:ClientID" "${{ secrets.LAND_INFO_CLIENT_ID }}" --project "$externalProjectPath"
          dotnet user-secrets set "LandInformationSearch:ClientSecret" "${{ secrets.LAND_INFO_CLIENT_SECRET }}" --project "$externalProjectPath"
          dotnet user-secrets set "RabbitMqOptions:Username" "guest" --project "$externalProjectPath"
          dotnet user-secrets set "RabbitMqOptions:Password" "guest" --project "$externalProjectPath"
          dotnet user-secrets set "FileStorage:ConnectionString" "${{ secrets.FILE_STORAGE_CONNECTION }}" --project "$externalProjectPath"
          dotnet user-secrets set "GovUkNotifyOptions:ApiKey" "${{ secrets.GOV_UK_NOTIFY_API_KEY }}" --project "$externalProjectPath"
          dotnet user-secrets set "GovUkOneLoginOptions:ClientId" "${{ secrets.ONE_LOGIN_API_KEY }}" --project "$externalProjectPath"
          dotnet user-secrets set "GovUkOneLoginOptions:SigningKeys:0:PrivateKeyPem"  "${{ secrets.ONE_LOGIN_PRIVATE_KEY }}" --project "$externalProjectPath"
        working-directory: Application Code

      - name: Inject User Secrets for Internal Project
        shell: bash
        run: |
          internalProjectPath="src/Host Applications/Forestry.Flo.Internal.Web/Forestry.Flo.Internal.Web.csproj"
          dotnet user-secrets set "ConnectionStrings:DefaultConnection" "just_text_for_secret" --project "$internalProjectPath"
          dotnet user-secrets set "AzureAdB2C:ClientId" "${{ secrets.AZURE_AD_B2C_CLIENT_ID }}" --project "$internalProjectPath"
          dotnet user-secrets set "AzureAdB2C:ClientSecret" "${{ secrets.AZURE_AD_B2C_CLIENT_SECRET }}" --project "$internalProjectPath"
          dotnet user-secrets set "AzureAd:TenantId" "${{ secrets.AZURE_AD_TENANT_ID }}" --project "$internalProjectPath"
          dotnet user-secrets set "AzureAd:ClientId" "${{ secrets.AZURE_AD_CLIENT_ID }}" --project "$internalProjectPath"
          dotnet user-secrets set "AzureAd:ClientSecret" "${{ secrets.AZURE_AD_CLIENT_SECRET }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:ApiKey" "${{ secrets.ESRI_FORESTRY_API_KEY }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientID" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_ID }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientSecret" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_SECRET }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:ApiKey" "${{ secrets.ESRI_FORESTER_API_KEY }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$internalProjectPath"
          dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$internalProjectPath"
          dotnet user-secrets set "LandInformationSearch:ClientID" "${{ secrets.LAND_INFO_CLIENT_ID }}" --project "$internalProjectPath"
          dotnet user-secrets set "LandInformationSearch:ClientSecret" "${{ secrets.LAND_INFO_CLIENT_SECRET }}" --project "$internalProjectPath"
          dotnet user-secrets set "RabbitMqOptions:Username" "guest" --project "$internalProjectPath"
          dotnet user-secrets set "RabbitMqOptions:Password" "guest" --project "$internalProjectPath"
          dotnet user-secrets set "FileStorage:ConnectionString" "${{ secrets.FILE_STORAGE_CONNECTION }}" --project "$internalProjectPath"
          dotnet user-secrets set "GovUkNotifyOptions:ApiKey" "${{ secrets.GOV_UK_NOTIFY_API_KEY }}" --project "$internalProjectPath"
          dotnet user-secrets set "GovUkOneLoginOptions:ClientId" "${{ secrets.ONE_LOGIN_API_KEY }}" --project "$internalProjectPath"
          dotnet user-secrets set "GovUkOneLoginOptions:SigningKeys:0:PrivateKeyPem"  "${{ secrets.ONE_LOGIN_PRIVATE_KEY }}" --project "$internalProjectPath"
        working-directory: Application Code

      # Build the two web apps and common app explicitly
      - name: Build external app
        run: dotnet build --no-restore "src/Host Applications/Forestry.Flo.External.Web/Forestry.Flo.External.Web.csproj"
        working-directory: Application Code
        timeout-minutes: 30

      - name: Build internal app
        run: dotnet build --no-restore "src/Host Applications/Forestry.Flo.Internal.Web/Forestry.Flo.Internal.Web.csproj"
        working-directory: Application Code
        timeout-minutes: 30

      - name: Build common library
        run: dotnet build --no-restore "src/Host Applications/Forestry.Flo.HostApplicationsCommon/Forestry.Flo.HostApplicationsCommon.csproj"
        working-directory: Application Code
        timeout-minutes: 30

      # Run the two Host Applications test projects explicitly
      - name: Test external web tests (with coverage)
        run: > 
          dotnet test "test/Host Applications/Forestry.Flo.External.Web.Tests/Forestry.Flo.External.Web.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test internal web tests (with coverage)
        run: >
          dotnet test "test/Host Applications/Forestry.Flo.Internal.Web.Tests/Forestry.Flo.Internal.Web.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      # Test Services projects
      - name: Test AdminHubs tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.AdminHubs.Tests/Forestry.Flo.Services.AdminHubs.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test Applicants tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.Applicants.Tests/Forestry.Flo.Services.Applicants.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test Common tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.Common.Tests/Forestry.Flo.Services.Common.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test ConditionsBuilder tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.ConditionsBuilder.Tests/Forestry.Flo.Services.ConditionsBuilder.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test DataImport tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.DataImport.Tests/Forestry.Flo.Services.DataImport.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test FellingLicenceApplications tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.FellingLicenceApplications.Tests/Forestry.Flo.Services.FellingLicenceApplications.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test FileStorage tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.FileStorage.Tests/Forestry.Flo.Services.FileStorage.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test Gis tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.Gis.Tests/Forestry.Flo.Services.Gis.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test InternalUsers tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.InternalUsers.Tests/Forestry.Flo.Services.InternalUsers.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test Notifications tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.Notifications.Tests/Forestry.Flo.Services.Notifications.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30

      - name: Test PropertyProfiles tests (with coverage)
        run: >
          dotnet test "test/Services/Forestry.Flo.Services.PropertyProfiles.Tests/Forestry.Flo.Services.PropertyProfiles.Tests.csproj"
          /p:CollectCoverage=true
          /p:CoverletOutput=TestResults/coverage.opencover.xml
          /p:CoverletOutputFormat=opencover
          --logger trx;LogFileName=TestResults/test.trx
          --verbosity normal
        working-directory: Application Code
        timeout-minutes: 30
      
      # Sonar END — only on push or non-fork PRs
      - name: SonarCloud End
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_ACTIONS }}
        working-directory: Application Code
        run: dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - name: Show coverage files found
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        working-directory: Application Code
        shell: bash
        run: |
          echo "== coverage.opencover.xml files =="
          find . -type f -path '*/TestResults/*/coverage.opencover.xml' -print
          echo "==============================="

      - name: Sonar diagnostics (did it import coverage?)
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        working-directory: Application Code
        shell: bash
        run: |
          LOGDIR=".sonarqube/out"
          echo "=== Scanner coverage import traces ==="
          grep -RInE "coverage|cobertura|OpenCover|import|reportsPaths" "$LOGDIR" || true
          echo "=== report-task.txt (CE task id) ==="
          cat .sonarqube/out/.sonar/report-task.txt || true
