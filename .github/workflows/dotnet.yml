name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup Java (for SonarScanner)
      if: ${{ vars.SONAR_ENABLED == 'true' }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    - name: Restore dependencies
      run: dotnet restore
      working-directory: Application Code

    # Inject secrets only when Sonar is enabled (to avoid missing-secrets errors in private repo)
    - name: Inject User Secrets for External Project
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) }}
      shell: bash
      run: |
        set -euo pipefail
        externalProjectPath="src/Host Applications/Forestry.Flo.External.Web/Forestry.Flo.External.Web.csproj"
        dotnet user-secrets set "ConnectionStrings:DefaultConnection" "just_text_for_secret" --project "$externalProjectPath"
        dotnet user-secrets set "AzureAdB2C:ClientId" "${{ secrets.AZURE_AD_B2C_CLIENT_ID }}" --project "$externalProjectPath"
        dotnet user-secrets set "AzureAdB2C:ClientSecret" "${{ secrets.AZURE_AD_B2C_CLIENT_SECRET }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:ApiKey" "${{ secrets.ESRI_FORESTRY_API_KEY }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientID" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_ID }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientSecret" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_SECRET }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:ApiKey" "${{ secrets.ESRI_FORESTER_API_KEY }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$externalProjectPath"
        dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$externalProjectPath"
        dotnet user-secrets set "LandInformationSearch:ClientID" "${{ secrets.LAND_INFO_CLIENT_ID }}" --project "$externalProjectPath"
        dotnet user-secrets set "LandInformationSearch:ClientSecret" "${{ secrets.LAND_INFO_CLIENT_SECRET }}" --project "$externalProjectPath"
        dotnet user-secrets set "RabbitMqOptions:Username" "guest" --project "$externalProjectPath"
        dotnet user-secrets set "RabbitMqOptions:Password" "guest" --project "$externalProjectPath"
        dotnet user-secrets set "FileStorage:ConnectionString" "${{ secrets.FILE_STORAGE_CONNECTION }}" --project "$externalProjectPath"
        dotnet user-secrets set "GovUkNotifyOptions:ApiKey" "${{ secrets.GOV_UK_NOTIFY_API_KEY }}" --project "$externalProjectPath"
        dotnet user-secrets set "GovUkOneLoginOptions:ClientId" "${{ secrets.ONE_LOGIN_API_KEY }}" --project "$externalProjectPath"
        dotnet user-secrets set "GovUkOneLoginOptions:SigningKeys:0:PrivateKeyPem"  "${{ secrets.ONE_LOGIN_PRIVATE_KEY }}" --project "$externalProjectPath"
      working-directory: Application Code

    - name: Inject User Secrets for Internal Project
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) }}
      shell: bash
      run: |
        set -euo pipefail
        internalProjectPath="src/Host Applications/Forestry.Flo.Internal.Web/Forestry.Flo.Internal.Web.csproj"
        dotnet user-secrets set "ConnectionStrings:DefaultConnection" "just_text_for_secret" --project "$internalProjectPath"
        dotnet user-secrets set "AzureAdB2C:ClientId" "${{ secrets.AZURE_AD_B2C_CLIENT_ID }}" --project "$internalProjectPath"
        dotnet user-secrets set "AzureAdB2C:ClientSecret" "${{ secrets.AZURE_AD_B2C_CLIENT_SECRET }}" --project "$internalProjectPath"
        dotnet user-secrets set "AzureAd:TenantId" "${{ secrets.AZURE_AD_TENANT_ID }}" --project "$internalProjectPath"
        dotnet user-secrets set "AzureAd:ClientId" "${{ secrets.AZURE_AD_CLIENT_ID }}" --project "$internalProjectPath"
        dotnet user-secrets set "AzureAd:ClientSecret" "${{ secrets.AZURE_AD_CLIENT_SECRET }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:ApiKey" "${{ secrets.ESRI_FORESTRY_API_KEY }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientID" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_ID }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forestry:GenerateTokenService:ClientSecret" "${{ secrets.ESRI_GENERATE_TOKEN_CLIENT_SECRET }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:ApiKey" "${{ secrets.ESRI_FORESTER_API_KEY }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:Forester:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Username" "${{ secrets.ESRI_FORESTER_USERNAME }}" --project "$internalProjectPath"
        dotnet user-secrets set "EsriConfig:PublicRegister:GenerateTokenService:Password" "${{ secrets.ESRI_FORESTER_PASSWORD }}" --project "$internalProjectPath"
        dotnet user-secrets set "LandInformationSearch:ClientID" "${{ secrets.LAND_INFO_CLIENT_ID }}" --project "$internalProjectPath"
        dotnet user-secrets set "LandInformationSearch:ClientSecret" "${{ secrets.LAND_INFO_CLIENT_SECRET }}" --project "$internalProjectPath"
        dotnet user-secrets set "RabbitMqOptions:Username" "guest" --project "$internalProjectPath"
        dotnet user-secrets set "RabbitMqOptions:Password" "guest" --project "$internalProjectPath"
        dotnet user-secrets set "FileStorage:ConnectionString" "${{ secrets.FILE_STORAGE_CONNECTION }}" --project "$internalProjectPath"
        dotnet user-secrets set "GovUkNotifyOptions:ApiKey" "${{ secrets.GOV_UK_NOTIFY_API_KEY }}" --project "$internalProjectPath"
        dotnet user-secrets set "GovUkOneLoginOptions:ClientId" "${{ secrets.ONE_LOGIN_API_KEY }}" --project "$internalProjectPath"
        dotnet user-secrets set "GovUkOneLoginOptions:SigningKeys:0:PrivateKeyPem"  "${{ secrets.ONE_LOGIN_PRIVATE_KEY }}" --project "$internalProjectPath"
      working-directory: Application Code

    - name: Build
      run: dotnet build --no-restore
      working-directory: Application Code
      timeout-minutes: 30

    - name: Test
      run: >
        dotnet test "Application Code"
        --no-build
        --verbosity normal
        /p:CollectCoverage=true
        /p:CoverletOutput=TestResults/coverage.opencover.xml
        /p:CoverletOutputFormat=opencover
      timeout-minutes: 30

    - name: Install dotnet-sonarscanner
      if: ${{ vars.SONAR_ENABLED == 'true' }}
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Add dotnet tools to PATH
      if: ${{ vars.SONAR_ENABLED == 'true' }}
      run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: SonarQube Begin
      if: ${{ vars.SONAR_ENABLED == 'true' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
      run: >
        dotnet sonarscanner begin
        /k:"${{ secrets.SONAR_PROJECT_KEY }}"
        /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
        /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.verbose=true
        /d:sonar.qualitygate.wait=false
        /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: SonarQube End
      if: ${{ vars.SONAR_ENABLED == 'true' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
